// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	models "canvas/models"

	mock "github.com/stretchr/testify/mock"
)

// ShapeRepoInterface is an autogenerated mock type for the ShapeRepoInterface type
type ShapeRepoInterface struct {
	mock.Mock
}

// CreateShape provides a mock function with given fields: shape, canvasID
func (_m *ShapeRepoInterface) CreateShape(shape *models.Shape, canvasID string) error {
	ret := _m.Called(shape, canvasID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Shape, string) error); ok {
		r0 = rf(shape, canvasID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShape provides a mock function with given fields: shape, id
func (_m *ShapeRepoInterface) DeleteShape(shape *models.Shape, id string) error {
	ret := _m.Called(shape, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Shape, string) error); ok {
		r0 = rf(shape, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShape provides a mock function with given fields: shape, id
func (_m *ShapeRepoInterface) GetShape(shape *models.Shape, id string) error {
	ret := _m.Called(shape, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Shape, string) error); ok {
		r0 = rf(shape, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShapes provides a mock function with given fields: shapes, canvasID
func (_m *ShapeRepoInterface) GetShapes(shapes *[]models.Shape, canvasID string) (*[]models.Shape, error) {
	ret := _m.Called(shapes, canvasID)

	var r0 *[]models.Shape
	if rf, ok := ret.Get(0).(func(*[]models.Shape, string) *[]models.Shape); ok {
		r0 = rf(shapes, canvasID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Shape)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*[]models.Shape, string) error); ok {
		r1 = rf(shapes, canvasID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShape provides a mock function with given fields: shape, id
func (_m *ShapeRepoInterface) UpdateShape(shape *models.Shape, id string) (*models.Shape, error) {
	ret := _m.Called(shape, id)

	var r0 *models.Shape
	if rf, ok := ret.Get(0).(func(*models.Shape, string) *models.Shape); ok {
		r0 = rf(shape, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Shape)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Shape, string) error); ok {
		r1 = rf(shape, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShapeRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewShapeRepoInterface creates a new instance of ShapeRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShapeRepoInterface(t mockConstructorTestingTNewShapeRepoInterface) *ShapeRepoInterface {
	mock := &ShapeRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
