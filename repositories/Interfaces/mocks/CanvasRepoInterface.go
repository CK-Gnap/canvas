// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	models "canvas/models"

	mock "github.com/stretchr/testify/mock"
)

// CanvasRepoInterface is an autogenerated mock type for the CanvasRepoInterface type
type CanvasRepoInterface struct {
	mock.Mock
}

// CreateCanvas provides a mock function with given fields: canvas
func (_m *CanvasRepoInterface) CreateCanvas(canvas *models.Canvas) error {
	ret := _m.Called(canvas)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Canvas) error); ok {
		r0 = rf(canvas)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCanvas provides a mock function with given fields: canvas, id
func (_m *CanvasRepoInterface) DeleteCanvas(canvas *models.Canvas, id string) error {
	ret := _m.Called(canvas, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Canvas, string) error); ok {
		r0 = rf(canvas, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCanvas provides a mock function with given fields: canvas, id
func (_m *CanvasRepoInterface) GetCanvas(canvas *models.Canvas, id string) error {
	ret := _m.Called(canvas, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Canvas, string) error); ok {
		r0 = rf(canvas, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCanvases provides a mock function with given fields: canvases
func (_m *CanvasRepoInterface) GetCanvases(canvases *[]models.Canvas) error {
	ret := _m.Called(canvases)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Canvas) error); ok {
		r0 = rf(canvases)
		

	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCanvas provides a mock function with given fields: canvas, id
func (_m *CanvasRepoInterface) UpdateCanvas(canvas *models.Canvas, id string) error {
	ret := _m.Called(canvas, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Canvas, string) error); ok {
		r0 = rf(canvas, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCanvasRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCanvasRepoInterface creates a new instance of CanvasRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCanvasRepoInterface(t mockConstructorTestingTNewCanvasRepoInterface) *CanvasRepoInterface {
	mock := &CanvasRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
